{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["checkoutSummary","props","className","classes","CheckoutSummary","Order","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","totalPrice","orderData","userId","onOrderBurger","token","inputChangeHandler","inputIndentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","formIsValid","inputIdentifier","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","auth","dispatch","actions","withErrorHandler","Axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","inputElement","inputClasses","InputElement","validationError","ValidationError","Invalid","join","onChange","option","Label","label","module","exports"],"mappings":"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","file":"static/js/3.a7726d31.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './CheckoutSummary.module.css';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\n\r\nconst checkoutSummary = ( props ) => {\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>We hope it tastes well !</h1>\r\n            <div className={classes.Order}>\r\n                <Burger ingredients={props.ingredients} />\r\n            </div>\r\n            <Button btnType=\"Danger\" clicked={props.checkoutCancelled}> CANCEL </Button>\r\n            <Button btnType=\"Success\" clicked={props.checkoutContinued}> CONTINUE </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default checkoutSummary;","import React, { Component } from 'react';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport classes from './ContactData.module.css';\r\nimport Axios from '../../../axios-orders';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../../store/actions/index';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport { updateObject, checkValidity } from '../../../shared/utility';\r\n\r\nclass ContactData extends Component {\r\n\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Full Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'ZIP Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Email Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        { value: 'fastest', displayValue: 'Fastest' },\r\n                        { value: 'cheapest', displayValue: 'Cheapest' }\r\n                    ]\r\n                },\r\n                value: 'fastest',\r\n                validation: {},\r\n                valid: true\r\n            },\r\n        },\r\n        formValid: false\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n        const formData = {};\r\n        for ( let formElementIdentifier in this.state.orderForm ) {\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value\r\n        }\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.totalPrice,\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        }\r\n        this.props.onOrderBurger( order, this.props.token );\r\n    }\r\n\r\n    \r\n\r\n    inputChangeHandler = (event, inputIndentifier) => {\r\n        const updatedFormElement = updateObject( this.state.orderForm[inputIndentifier], {\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIndentifier].validation),\r\n            touched: true\r\n        } );\r\n        const updatedOrderForm = updateObject(this.state.orderForm, {\r\n            [inputIndentifier] : updatedFormElement\r\n        } );\r\n\r\n        let formIsValid = true;\r\n        for( let inputIdentifier in updatedOrderForm ) {\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid ;\r\n        }\r\n        this.setState({ orderForm: updatedOrderForm, formValid: formIsValid });\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n        let form = (\r\n            <form onSubmit={this.orderHandler} >\r\n                {formElementsArray.map( ( formElement ) => (\r\n                    <Input elementType={formElement.config.elementType}\r\n                           elementConfig={formElement.config.elementConfig}\r\n                           value={formElement.config.value}\r\n                           invalid={!formElement.config.valid}\r\n                           shouldValidate={formElement.config.validation}\r\n                           touched={formElement.config.touched}\r\n                           key={formElement.id}\r\n                           changed={ (event) => this.inputChangeHandler(event, formElement.id) } />\r\n                ))}\r\n                <Button btnType=\"Success\" clicked={this.orderHandler}\r\n                        disabled={!this.state.formValid} > ORDER </Button>\r\n            </form>\r\n        );\r\n        if( this.props.loading ) {\r\n            form = <Spinner />\r\n        }\r\n        return (\r\n            <div className={classes.ContactData} >\r\n                <h4> Enter your Contact Data </h4>\r\n                { form }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        totalPrice: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: ( orderData, token ) => dispatch(actions.purchaseBurger(orderData, token))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)( withErrorHandler(ContactData, Axios) );","import React, { Component } from 'react';\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport ContactData from '../Checkout/ContactData/ContactData';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Checkout extends Component {\r\n\r\n    checkoutCancelledHandler = () => { this.props.history.goBack() }\r\n\r\n    checkoutContinuedHandler = () => { this.props.history.replace('/checkout/contact-data') }\r\n\r\n    render() {\r\n        let summary = <Redirect to=\"/\" />\r\n        if( this.props.ings ) {\r\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\r\n            summary = (\r\n                <div>\r\n                    { purchasedRedirect }\r\n                    <CheckoutSummary ingredients={this.props.ings}\r\n                                 checkoutCancelled={+this.checkoutCancelledHandler}\r\n                                 checkoutContinued={this.checkoutContinuedHandler} />\r\n                    <Route path={this.props.match.path + '/contact-data'}\r\n                            component={ContactData} />\r\n                </div>\r\n            )\r\n        }\r\n        return summary;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ( state ) => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased : state.order.purchased\r\n    }\r\n}\r\n\r\nexport default connect( mapStateToProps )( Checkout );","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst Input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n    let validationError = null;\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched) {\r\n        validationError = <p className={classes.ValidationError}>Please enter a valid { props.elementConfig.placeholder}</p>\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch( props.elementType ) {\r\n        case ( 'input' ):\r\n            inputElement = <input { ...props.elementConfig }\r\n                                className={inputClasses.join(' ')}\r\n                                value={props.value} \r\n                                onChange={props.changed} />\r\n            break;\r\n        case ( 'textarea' ):\r\n            inputElement = <textarea { ...props.elementConfig }\r\n                                className={inputClasses.join(' ')}\r\n                                value={props.value} \r\n                                onChange={props.changed} />\r\n            break;\r\n        case ( 'select' ):\r\n            inputElement = (\r\n                <select className={inputClasses.join(' ')}\r\n                        value={props.value}\r\n                        onChange={props.changed} >\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}> {option.displayValue} </option>\r\n                    ))}\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input { ...props.elementConfig }\r\n                                className={inputClasses.join(' ')}\r\n                                value={props.value}\r\n                                onChange={props.changed} />\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input} >\r\n            <label className={classes.Label} > {props.label} </label>\r\n            { inputElement }\r\n            { validationError }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1JZgq\",\"Label\":\"Input_Label__jOVUz\",\"InputElement\":\"Input_InputElement__vA8e3\",\"Invalid\":\"Input_Invalid__21m8O\",\"ValidationError\":\"Input_ValidationError__hmnB6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"CheckoutSummary_Order__34UGS\",\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__1mwSE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__3CXc1\"};"],"sourceRoot":""}