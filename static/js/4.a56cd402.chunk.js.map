{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignUp","inputChangeHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","formSubmitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","Input","inputElement","inputClasses","InputElement","validationError","ValidationError","Invalid","join","onChange","options","option","displayValue","Label","label"],"mappings":"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","file":"static/js/4.a56cd402.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1HhmI\"};","import React, { Component } from 'react';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport classes from './Auth.module.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport { Redirect } from 'react-router';\r\nimport { updateObject, checkValidity } from '../../shared/utility';\r\n\r\nclass Auth extends Component {\r\n\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Email Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 7\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignUp: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\r\n            this.props.onSetAuthRedirectPath()\r\n        }\r\n    }\r\n\r\n    inputChangeHandler = ( event, controlName ) => {\r\n        const updatedControls = updateObject( this.state.controls, {\r\n            [controlName]: updateObject(this.state.controls[controlName], {\r\n                value: event.target.value,\r\n                valid: checkValidity( event.target.value, this.state.controls[controlName].validation ),\r\n                touched: true\r\n            })\r\n        });\r\n        this.setState({ controls: updatedControls });\r\n    }\r\n\r\n    formSubmitHandler = ( event ) => {\r\n        event.preventDefault();\r\n        this.props.onAuth( this.state.controls.email.value, \r\n                            this.state.controls.password.value,\r\n                            this.state.isSignUp );\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState( prevState => {\r\n            return { isSignUp: !prevState.isSignUp }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.controls) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n\r\n        let form = formElementsArray.map(formElement => (\r\n            <Input key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangeHandler(event, formElement.id)} />\r\n        ));\r\n\r\n        if( this.props.loading ) {\r\n            form = <Spinner />\r\n        }\r\n\r\n        let errorMessage = null;\r\n        if( this.props.error ) {\r\n            errorMessage = <p> { this.props.error.message } </p>\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if(this.props.isAuthenticated) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n        }\r\n\r\n        return (\r\n            <div className={classes.Auth}>\r\n                { authRedirect }\r\n                { errorMessage }\r\n                <form onSubmit={this.formSubmitHandler}>\r\n                    { form }\r\n                    <Button btnType=\"Success\"> SUBMIT </Button>\r\n                    <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}>\r\n                        SWITCH TO { this.state.isSignUp ? 'SIGN IN' : 'SIGN UP' }\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignUp ) => dispatch( actions.auth( email, password, isSignUp ) ),\r\n        onSetAuthRedirectPath: () => dispatch( actions.setAuthRedirectPath('/'))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)( Auth );","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst Input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n    let validationError = null;\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched) {\r\n        validationError = <p className={classes.ValidationError}>Please enter a valid { props.elementConfig.placeholder}</p>\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch( props.elementType ) {\r\n        case ( 'input' ):\r\n            inputElement = <input { ...props.elementConfig }\r\n                                className={inputClasses.join(' ')}\r\n                                value={props.value} \r\n                                onChange={props.changed} />\r\n            break;\r\n        case ( 'textarea' ):\r\n            inputElement = <textarea { ...props.elementConfig }\r\n                                className={inputClasses.join(' ')}\r\n                                value={props.value} \r\n                                onChange={props.changed} />\r\n            break;\r\n        case ( 'select' ):\r\n            inputElement = (\r\n                <select className={inputClasses.join(' ')}\r\n                        value={props.value}\r\n                        onChange={props.changed} >\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}> {option.displayValue} </option>\r\n                    ))}\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input { ...props.elementConfig }\r\n                                className={inputClasses.join(' ')}\r\n                                value={props.value}\r\n                                onChange={props.changed} />\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input} >\r\n            <label className={classes.Label} > {props.label} </label>\r\n            { inputElement }\r\n            { validationError }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1JZgq\",\"Label\":\"Input_Label__jOVUz\",\"InputElement\":\"Input_InputElement__vA8e3\",\"Invalid\":\"Input_Invalid__21m8O\",\"ValidationError\":\"Input_ValidationError__hmnB6\"};"],"sourceRoot":""}